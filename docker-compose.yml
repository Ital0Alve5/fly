services:
  pgdb:
    image: postgres:alpine 
    ports:
      - 5432:5432
    volumes:
      - .docker/pgdb/data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - flynetwork

  init-db:
    image: postgres:alpine
    depends_on:
      pgdb:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "until pg_isready -h pgdb -U admin;
      do echo 'Esperando pgdb...'; sleep 2; done &&
      (psql -h pgdb -U admin -d postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'fly_service'\" | grep -q 1 || psql -h pgdb -U admin -d postgres -c \"CREATE DATABASE fly_service\") &&
      (psql -h pgdb -U admin -d postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'employee_service'\" | grep -q 1 || psql -h pgdb -U admin -d postgres -c \"CREATE DATABASE employee_service\") &&
      (psql -h pgdb -U admin -d postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'client_service'\" | grep -q 1 || psql -h pgdb -U admin -d postgres -c \"CREATE DATABASE client_service\") &&
      (psql -h pgdb -U admin -d postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'reservation_service_query'\" | grep -q 1 || psql -h pgdb -U admin -d postgres -c \"CREATE DATABASE reservation_service_query\") &&
      (psql -h pgdb -U admin -d postgres -tc \"SELECT 1 FROM pg_database WHERE datname = 'reservation_service_command'\" | grep -q 1 || psql -h pgdb -U admin -d postgres -c \"CREATE DATABASE reservation_service_command\")"
    environment:
      PGPASSWORD: admin
    networks:
      - flynetwork

  mongodb:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=auth_service    
    ports:
      - 27017:27017
    volumes:
      - .docker/mongodb:/data/db
    networks:
      - flynetwork

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - flynetwork

  api-gateway:
    build:
      context: ./back/api-gateway
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    volumes:
      - ./back/api-gateway:/app
    depends_on:
      - pgdb
    networks:
      - flynetwork

  auth-service:
    build:
      context: ./back/auth-service
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    volumes:
      - ./back/auth-service:/app
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://pgdb:5432/auth_service
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin
    depends_on:
      - pgdb
      - rabbitmq
      - mongodb
    networks:
      - flynetwork

  fly-service:
    build:
      context: ./back/fly-service
      dockerfile: Dockerfile
    ports:
      - 8081:8080
    volumes:
      - ./back/fly-service:/app
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://pgdb:5432/fly_service
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin
    depends_on:
      pgdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully
    networks:
      - flynetwork

  client-service:
    build:
      context: ./back/client-service
      dockerfile: Dockerfile
    ports:
      - 8082:8080
    volumes:
      - ./back/client-service:/app
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://pgdb:5432/client_service
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin
    depends_on:
      pgdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully
    networks:
      - flynetwork

  employee-service:
    build:
      context: ./back/employee-service
      dockerfile: Dockerfile
    ports:
      - 8083:8080
    volumes:
      - ./back/employee-service:/app
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://pgdb:5432/employee_service
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin
    depends_on:
      pgdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully
    networks:
      - flynetwork

  reservation-service:
    build:
      context: ./back/reservation-service
      dockerfile: Dockerfile
    ports:
      - 8084:8080
    volumes:
      - ./back/reservation-service:/app
    environment:
      - COMMAND_DB_URL=jdbc:postgresql://pgdb:5432/reservation_service_command
      - COMMAND_DB_USER=admin
      - COMMAND_DB_PASS=admin
      - QUERY_DB_URL=jdbc:postgresql://pgdb:5432/reservation_service_query
      - QUERY_DB_USER=admin
      - QUERY_DB_PASS=admin
    depends_on:
      pgdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully
    networks:
      - flynetwork

  saga:
    build:
      context: ./back/saga
      dockerfile: Dockerfile
    ports:
      - 8085:8080
    volumes:
      - ./back/saga:/app
    environment:
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin
    depends_on:
      pgdb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      init-db:
        condition: service_completed_successfully
    networks:
      - flynetwork

networks:
  flynetwork:
    driver: bridge
